//@prepros-append pages/common.js
//@prepros-append pages/maps.js
//@prepros-append pages/sliders.js
//@prepros-append pages/index.js
//@prepros-append pages/catalog.js
//@prepros-append pages/product.js
//@prepros-append pages/articles.js
function Switches(prop) {
    this.sws = document.querySelector(prop.sws);
    this.width = this.sws.offsetWidth;
    this.swsList = document.querySelectorAll(prop.sw);
    this.line = document.querySelector(prop.line);
    this.tabs = document.querySelectorAll(prop.tab);
    this.tabsObj = document.querySelector(prop.tabs);
    this.tabSelector = prop.tab;
    this.autoWidth = prop.autoWidth || false;
    // this.scrollbar = prop.scrollbar || true;

    if (prop.switchActive === false) {
        this.switchActive = false
    } else {
        this.switchActive = true;
    }

    if (prop.scrollbar === false) {
        this.scrollbar = false;
    } else {
        this.scrollbar = true;
    }

    let that = this;

    this.init = function () {
        let $this = that.swsList[0],
            percent = ($this.offsetLeft / that.width) * 100,
            id = $this.dataset.id,
            maxH = 0,
            tab = document.querySelector(that.tabSelector + '[data-id="' + id + '"]');


        for (let i = 0; i < that.swsList.length; i++) {
            that.swsList[i].classList.remove('active');
        }

        for (let i = 0; i < that.tabs.length; i++) {
            let tab = that.tabs[i],
                height = tab.offsetHeight;
            tab.classList.remove('active');
            if (maxH<height){
                maxH=height;
            }
        }
        that.tabsObj.style.height = maxH+'px';

        tab.classList.add('active');
        $this.classList.add('active');

        if (that.scrollbar) {
            that.line.style.left = percent + '%';

            if (that.autoWidth) {
                let lineWidth = $this.offsetWidth + 'px';
                that.line.style.width = lineWidth;
            }
        }
    };

    for (let i = 0; i < that.swsList.length; i++) {
        that.swsList[i].addEventListener('click', function (e) {

            let percent = (this.offsetLeft / that.width) * 100,
                id = this.dataset.id,
                tab = document.querySelector(that.tabSelector + '[data-id="' + id + '"]');


            for (let i = 0; i < that.swsList.length; i++) {
                that.swsList[i].classList.remove('active');
            }

            for (let i = 0; i < that.tabs.length; i++) {
                that.tabs[i].classList.remove('active');
            }

            tab.classList.add('active');
            this.classList.add('active');

            if (that.scrollbar) {
                that.line.style.left = percent + '%';

                if (that.autoWidth) {
                    let lineWidth = this.offsetWidth + 'px';
                    that.line.style.width = lineWidth;
                }
            }

        });
    }
}

function animateToCart(item) {

    var offset = item.offset(),
        width = item.outerWidth(),
        height = item.outerHeight(),
        offsetTop = offset.top,
        offsetLeft = offset.left,
        cart = $('.basket-link');

    $(item)
        .clone()
        .css({
            width: width,
            height: height,
            position: 'absolute',
            'z-index': '11100',
            top: offsetTop,
            left: offsetLeft
        })
        .appendTo("body")
        .animate({
            opacity: 0.05,
            left: cart.offset()['left'],
            top: cart.offset()['top'],
            width: 20,
            height: 13.2
        }, 2000, function () {
            $(this).remove();
        });
}

$('body').on('click', '.buy', function (e) {
    e.preventDefault();
    let $this = $(this),
        item = $this.closest('.buyItem'),
        id = item.attr('data-id'),
        img = item.find('.buyImg');
    animateToCart(img);
});

$('body').on('click', '.count__up', function (e) {
    e.preventDefault();

    let $this = $(this),
        count = $this.closest('.count'),
        input = count.find('.count__input'),
        val = Number(input.val());
    val++;

    input.val(val);

});

$('body').on('click', '.count__down', function (e) {
    e.preventDefault();

    let $this = $(this),
        count = $this.closest('.count'),
        input = count.find('.count__input'),
        val = Number(input.val());
    if (val>1) {
        val--;
    }

    input.val(val);

});
/*YANDEX*/
$(function ()   {
    ymaps.ready(init);
    var myMap,
        myPlacemark;

    function init() {

        if ($('#map').length) {
            var center = [55.733996408140875,37.712371096572895];
            // if ($(window).width() < 576) {
            //     center = [55.609501798660396, 37.61325538360591];
            // }

            myMap = new ymaps.Map("map", {
                center: center,
                zoom: 17,
                controls: []
            });


            myMap.behaviors.disable(['scrollZoom']);
            // myMap.controls.remove('geolocationControl')
            //     .remove('searchControl')
            //     .remove('trafficControl')
            //     .remove('typeSelector')
            //     .remove('fullscreenControl')
            //     .remove('zoomControl')
            //     .remove('rulerControl');

            myPin = new ymaps.GeoObjectCollection({}, {
                // iconLayout: 'default#image',
                // iconImageHref: '/img/icons/map-marker.svg',
                // iconImageSize: [46, 57],
                // iconImageOffset: [-15, -55]
            });


            myPlacemark1 = new ymaps.Placemark([55.734299088188656, 37.71238182540895], {
                    balloonContentHeader: "Вкусита",
                    balloonContentBody: "Оптово - розничный интернет магазин орехов и сухофруктов",
                    balloonContentFooter: "Россия, 125040, г. Москва, улица Нижегородская, 29-33",
                    hintContent: "vkusita.ru"
                },
                {
                    iconLayout: 'default#image',
                    iconImageHref: 'images/icons/pinY.svg',
                    iconImageSize: [75, 90],
                    iconImageOffset: [-45, -75]
                    // preset: 'islands#redGlyphIcon'
                });


            myPin.add(myPlacemark1);
            myMap.geoObjects.add(myPin);
        }
    }
});
/*END YANDEX*/
$(function () {
    let ispecsSlider = new Swiper ('.ispecs__container', {
        slidesPerView: 4,
        slidesPerGroup: 4,
        spaceBetween: 20,
        navigation: {
            nextEl: '.ispecs__next .arrow',
            prevEl: '.ispecs__prev .arrow',
        },
        pagination: {
            el: '.ispecs__pag',
            clickable: true
        },

    });

    let irevsSlider = new Swiper ('.irevs__container', {
        slidesPerView: 2,
        spaceBetween: 20,
        loop: true,
        navigation: {
            nextEl: '.irevs__next .arrow',
            prevEl: '.irevs__prev .arrow',
        }
    });

    let recentlySlider = new Swiper ('.recently__container', {
        slidesPerView: 4,
        spaceBetween: 20,
        navigation: {
            nextEl: '.recently__next .arrow',
            prevEl: '.recently__prev .arrow',
        }
    });

    let catalogSlider = new Swiper ('.catalog__banner-container', {
        loop: true,
        speed: 1000,
        pagination: {
            el: '.catalog__banner-pag',
            clickable: true
        },
        autoplay: {
            delay: 3000,
        }
    });
});
$(function () {

    $('.search__input').on('input', $.debounce(sendAjax, 300));
    $('.search__input').closest();
    function sendAjax(){
        let $this = $('.search__input'),
            val = $this.val(),
            form = $this.closest('.search'),
            rep = form.find('.search__ajax'),
            data = form.serialize();

        if (val.length > 2) {
            $.ajax({
                dataType: "json",
                type: "POST",
                url: 'ajax.php',
                data: data,
                success: function (result) {
                    if (result.status) {
                        rep.html(result.html).addClass('active');
                    } else {
                        alert('Что-то пошло не так, попробуйте еще раз!!!');
                    }
                },
                error: function (result) {
                    alert('Что-то пошло не так, попробуйте еще раз!!!');
                }
            });
        } else {
            rep.removeClass('active');
        }
    }

    $('.search__clear').on('click', function (e) {
        let $this = $(this),
            form = $this.closest('.search');

        form.trigger('reset');
    });

    $('.search').on('reset', function (e) {
        let $this = $(this),
            ajax = $this.find('.search__ajax');
        ajax.removeClass('active');
    });

    let ispecsSwithes = document.querySelector('.ispecs__sws-list');
    if (ispecsSwithes) {

        let switches = new Switches({
            sws: '.ispecs__sws-list',
            sw: '.ispecs__sw',
            line: '.ispecs__subline',
            tab: '.ispecs__tab',
            tabs: '.ispecs__tabs',
            autoWidth: true
        }).init();
    }

});
$(function () {
    $('.select').styler();

    $('body').on('click', '.catalog__types .type', function (e) {
        let $this = $(this),
            form = $this.closest('form'),
            type = $this.attr('data-type'),
            input = form.find('input[name=type]');

        if (input.val() != type) {
            input.val(type);

            let data = form.serialize();

            sendAjax(form, data);
        }
    });


    $('body').on('change', '.catalog__select-select .select', function (e) {
        let $this = $(this),
            form = $this.closest('form'),
            data = form.serialize();

        sendAjax(form, data);

    });

    function sendAjax(form, data) {
        $.ajax({
            dataType: "json",
            type: "POST",
            url: 'ajax.php',
            data: data,
            success: function (result) {
                if (result.status) {
                    form.replaceWith(result.html);
                    $('.select').styler();
                } else {
                    alert('Что-то пошло не так, попробуйте еще раз!!!');
                }
            },
            error: function (result) {
                alert('Что-то пошло не так, попробуйте еще раз!!!');
            }
        });
    }

});
$(function () {
    $('.pr__img').on('click', function (e) {

        let $this = $(this),
            imgs = $('.pr__img'),
            img = $this.find('.pr__img-img'),
            src = img.attr('src'),
            image = $('.pr__image-img');

        imgs.removeClass('active');
        image.attr('src', src);
        $this.addClass('active');

    });


    let productSwithes = document.querySelector('.pr__sws-list');
    if (productSwithes) {

        let switches = new Switches({
            sws: '.pr__sws-list',
            sw: '.pr__sw',
            line: '.pr__subline',
            tab: '.pr__tab',
            tabs: '.pr__tabs',
            autoWidth: true
        }).init();
    }
});
$(function () {
    let row = $('.arts__row_bottom'),
        items = row.find('.arts__item'),
        imgs = $('.arts__row_bottom .arts__item-image'),
        maH = 0;

    items.each(function (indx,elem) {
        let item = $(elem),
            img = item.find('.arts__item-image'),
            height = img.outerHeight();

        if (maH<height){
            maH = height;
        }
    });


    imgs.css('height', maH);
});

//# sourceMappingURL=main.min.js.map